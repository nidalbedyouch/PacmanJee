package fr.univangers.pacman.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import fr.univangers.pacman.beans.Partie;

public class PartieDaoImpl implements PartieDAO {
	 private DAOFactory daoFactory;
	 private static final String SQL_CREATE = "CREATE TABLE IF NOT EXISTS "
	    		+ GAMETABLE 		+ "("
	    		+ COLUMN_ID			+ " INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT , "
	    		+ COLUMN_SCORE		+ " INTEGER NOT NULL, "
	    		+ COLUMN_PLAYER		+ " TEXT NOT NULL,"
	    		+ COLUMN_VICTORY	+  " TEXT NOT NULL " 
	    		+ "CHECK( typeof( "  + COLUMN_VICTORY + ") = \"text\" AND "
	    		+ COLUMN_VICTORY    + " IN (\"TRUE\" , \"FALSE\") ),"						
	 			+ COLUMN_DATE + " TIMESTAMP NOT NULL,"
	 			+ "FOREIGN KEY ( " + COLUMN_PLAYER + " ) REFERENCES "
	 			+ UserDao.USERTABLE + "( " +UserDao.COLUMN_PSEUDO +" )"	
	 			+")";
	 private static final String SQL_INSERT = "INSERT INTO "
	    		+ GAMETABLE 		+ "("
	    		+ COLUMN_SCORE 	+ ", "
	    		+ COLUMN_PLAYER	+ ","
	    		+ COLUMN_VICTORY + ","
	    		+ COLUMN_DATE  +") VALUES(?, ?, ?,?)";
	 private static final String SQL_SELECT = "SELECT "
	    		+ COLUMN_ID 		+ ", "
	    		+ COLUMN_SCORE		+ ", "
	    		+ COLUMN_PLAYER	+ ", "
	    		+ COLUMN_VICTORY + ", "
	    		+ COLUMN_DATE + " FROM "
	    		+ GAMETABLE		+ " WHERE "
	    	    + COLUMN_ID		+ " = ?";
	 private static final String SQL_DELETE = "DELETE FROM "
	    		+ GAMETABLE		+ " WHERE "
	    	    + COLUMN_ID		+ " = ?";
	 private static final String SQL_UPDATE_SCORE = "UPDATE "
				+ GAMETABLE		+ " "
			    + COLUMN_ID			+ " = ? WHERE "
				+ COLUMN_SCORE		+ " = ?";
	 private static final String SQL_SELECT_GAMES_BYPLAYER = "SELECT "
	    		+ COLUMN_ID 		+ ", "
	    		+ COLUMN_SCORE		+ ", "
	    		+ COLUMN_PLAYER	+ ", "
	    		+ COLUMN_VICTORY + ", "
	    		+ COLUMN_DATE + " FROM "
	    		+ GAMETABLE		+ " WHERE "
	    	    + COLUMN_PLAYER		+ " = ?";
	 private static final String SQL_SELECT_WINNEDGAMES_BYPLAYER = "SELECT "
	    		+ COLUMN_ID 		+ ", "
	    		+ COLUMN_SCORE		+ ", "
	    		+ COLUMN_PLAYER	+ ", "
	    		+ COLUMN_VICTORY + ", "
	    		+ COLUMN_DATE + " FROM "
	    		+ GAMETABLE		+ " WHERE "
	    	    + COLUMN_PLAYER		+ " = ? AND"
	    	    + COLUMN_VICTORY  + " = TRUE ";
	 private static final String SQL_SELECT_BEST_GAMES = "SELECT * FROM "
	    		+ GAMETABLE		+ " WHERE "
	    	    + COLUMN_VICTORY  + " is \"TRUE\" "
	    	    + "ORDER BY " + COLUMN_SCORE + " DESC LIMIT 4 ";
	 
	public PartieDaoImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
		Connection connexion = null;
	    PreparedStatement preparedStatement = null;
	     
	     try {
		        connexion = daoFactory.getConnection();
		        preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_CREATE, false);
		        int statut = preparedStatement.executeUpdate();
		        if(statut != 0) {   /*The statement executed was a DDL statement if table created it returns 0.*/
		            throw new DAOException("Echec de la création de la table partie.");
		        }
		 } catch(SQLException e) {
		        throw new DAOException(e);
		 } finally {
		        DAOUTILITY.fermeturesSilencieuses(preparedStatement, connexion);
		 }
	}

	@Override
	public void insert(Partie partie) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		
		try {
			connexion = daoFactory.getConnection();
			Object objets[] = { partie.getScore(),partie.getPlayer(),partie.isWinned() ? "TRUE" : "FALSE",partie.getDate() };
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_INSERT, true, objets);
			int statut = preparedStatement.executeUpdate();
			if(statut == 0) //aucune ligne insérée 
				throw new DAOException("Echec de la création de la partie, aucune ligne ajoutée dans la table.");
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if(autoGeneratedValues.next())
					partie.setId(autoGeneratedValues.getLong(1));
			else 
				throw new DAOException("Échec de la création de la partie en base, aucun ID auto-généré retourné.");
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			 DAOUTILITY.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
	}

	@Override
	public Partie find(Long id) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet resSet = null;
		Partie game = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_SELECT, false, id);
			resSet = preparedStatement.executeQuery();
			if(resSet.next())
				game = map(resSet);
		}catch(SQLException e) {
			throw new DAOException(e);
		}finally {
			DAOUTILITY.fermeturesSilencieuses(resSet, preparedStatement, connexion);
		}
		return game;
	}


	@Override
	public void updateScore(Long id,int newScore) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_UPDATE_SCORE, true, id , newScore);
			int statut = preparedStatement.executeUpdate();
			if(statut == 0) //aucune ligne insérée 
				throw new DAOException("Echec modication score");
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			 DAOUTILITY.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
	}

	@Override
	public void delete(Long id) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_DELETE, true, id);
			int statut = preparedStatement.executeUpdate();
			if(statut == 0) //aucune ligne insérée 
				throw new DAOException("Echec suppression partie");
		}catch(SQLException e) {
			 throw new DAOException(e);
		}finally {
			 DAOUTILITY.fermeturesSilencieuses(autoGeneratedValues, preparedStatement, connexion);
		}
		
	}
	
	@Override
	public ArrayList<Partie> getGames(String pseudo) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet resSet = null;
		ArrayList<Partie> game = new ArrayList<Partie>();
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_SELECT_GAMES_BYPLAYER, false, pseudo);
			resSet = preparedStatement.executeQuery();
			while(resSet.next())
				game.add(map(resSet));
		}catch(SQLException e) {
			throw new DAOException(e);
		}finally {
			DAOUTILITY.fermeturesSilencieuses(resSet, preparedStatement, connexion);
		}
		return game;
	}

	
	@Override
	public ArrayList<Partie> getWinnedGames(String pseudo) {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet resSet = null;
		ArrayList<Partie> game = new ArrayList<Partie>();
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_SELECT_WINNEDGAMES_BYPLAYER, false, pseudo);
			resSet = preparedStatement.executeQuery();
			while(resSet.next())
				game.add(map(resSet));
		}catch(SQLException e) {
			throw new DAOException(e);
		}finally {
			DAOUTILITY.fermeturesSilencieuses(resSet, preparedStatement, connexion);
		}
		return game;
	}
	
	@Override
	public ArrayList<Partie> getTop4Games() {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet resSet = null;
		ArrayList<Partie> games = new ArrayList<Partie>();
		try {
			connexion = daoFactory.getConnection();
			preparedStatement = DAOUTILITY.initRequetePreparee(connexion, SQL_SELECT_BEST_GAMES, true);
			resSet = preparedStatement.executeQuery();
			
			while(resSet.next()) {
				games.add(map(resSet));
			}
		}catch(SQLException e) {
			throw new DAOException(e);
		}finally {
			DAOUTILITY.fermeturesSilencieuses(resSet, preparedStatement, connexion);
		}
		return games;
	}
	
	private Partie map(ResultSet resSet) throws SQLException {
		Partie game = new Partie();
		game.setId(resSet.getLong(COLUMN_ID));
		game.setScore(resSet.getInt(COLUMN_SCORE));
		game.setPlayer(resSet.getString(COLUMN_PLAYER));
		game.setWinned(resSet.getString(COLUMN_VICTORY) == "TRUE" ? true : false);
		game.setDate(resSet.getTimestamp(COLUMN_DATE));
		return game;
	}

	

}
